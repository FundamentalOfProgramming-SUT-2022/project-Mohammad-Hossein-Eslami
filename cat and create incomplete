//FOP-Project
// Mohammad Hossein Eslami 

#include <stdio.h>
#include <sys/stat.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>
#include <dirent.h> 
#include <sys/types.h>
#define MAX_LINE_LENGTH 1000

int main(){
    char dastor [30];
    char file[] = "besaz--file";
    char cat[] = "bekhun--file";
    char exit[] = "exit";
    int counter = 0;
    FILE * fptr;
    while(1){
    scanf("%s", dastor);   
    if(!strcmp(dastor, file)){
                char c;
                scanf(" ");
                scanf("%c", &c); //Next line is to seperate the different ways to receive a command
                if (c == '/'){
                    char folder[50];
                    scanf("%s", folder);
                    char *folder2 = (char*)malloc(50); 
                    char *folder1 = strtok(folder, "/");
                    while (folder1 != NULL){
                        mkdir(folder1);
                        chdir(folder1);
                        counter++;
                        folder2 = folder1;
                        folder1 = strtok(NULL, "/");
                    }
                    chdir(".."); //Goes back to delete the directory and make a file with the same name
                    rmdir(folder2);
                    fptr = fopen(folder2, "w");

                    fclose(fptr);
                    for (int i = counter; i > 1; i--){
                        chdir("..");
                    }
                    counter = 0;
                } else if ( c == '"'){
                    char folder[100];
                    char a;
                    gets(folder);
                    for (int i=0;;i++){ //This for is made to ignore the '"' mark at the end of the string
                        a=folder[i];
                        if(a=='\0'){
                            folder[i-1] = '\0';
                            break;
                        }
                    }
                    char *folder2 = (char*)malloc(50); 
                    char *folder1 = strtok(folder, "/");
                    while (folder1 != NULL){
                        mkdir(folder1);
                        chdir(folder1);
                        counter++;
                        folder2 = folder1;
                        folder1 = strtok(NULL, "/");
                    }
                    chdir("..");
                    rmdir(folder2);
    
                    fptr = fopen(folder2, "w");
                    for (int i = counter; i > 1; i--){
                        chdir("..");
                    }
                    counter = 0;
                }
        } else if (!strcmp(dastor, exit)){
            break;
        } else if (!strcmp(dastor, cat)){
                char c;
                scanf(" ");
                scanf("%c", &c); //Next line is to seperate the different ways to receive a command
                if (c == '/'){
                    int counter;
                    char folder[50];
                    scanf("%s", folder);
                    char *folder2 = (char*)malloc(50); 
                    char *folder1 = strtok(folder, "/");
                    while (folder1 != NULL){
                        chdir(folder1);
                        counter++;
                        folder2 = folder1;
                        folder1 = strtok(NULL, "/");
                    }
                    fptr = fopen(folder2, "r");
                    if (fptr == NULL){
                        printf("File does not exist\n");
                        for (int i = counter; i > 1; i--){
                            chdir("..");
                        }
                        counter = 0;
                    } else {
                        char ch;
                        ch = fgetc(fptr);
                        while( ch != EOF){
                            printf("%c", ch);
                            ch = fgetc(fptr);
                        }
                        printf("\n");
                        for (int i = counter; i > 1; i--){
                            chdir("..");
                        }
                    }
                    fclose(fptr);
                    counter = 0;
                } else if (c == '"'){
                    char folder[100];
                    char a;
                    gets(folder);
                    for (int i=0;;i++){ //This for is made to ignore the '"' mark at the end of the string
                        a=folder[i];
                        if(a=='\0'){
                            folder[i-1] = '\0';
                            break;
                        }
                    }
                    char *folder2 = (char*)malloc(50); 
                    char *folder1 = strtok(folder, "/");
                    while (folder1 != NULL){
                        chdir(folder1);
                        counter++;
                        folder2 = folder1;
                        folder1 = strtok(NULL, "/");
                    }
                    fptr = fopen(folder2, "r");
                    if (fptr == NULL){
                        printf("File does not exist\n");
                        for (int i = counter; i > 1; i--){
                            chdir("..");
                        }
                        counter = 0;
                    } else {
                        char ch;
                        ch = fgetc(fptr);
                        while( ch != EOF){
                            printf("%c", ch);
                            ch = fgetc(fptr);
                        }
                        printf("\n");
                        for (int i = counter; i > 1; i--){
                            chdir("..");
                        }
                    }
                    fclose(fptr);
                    counter = 0;
                }
        } else {
            char c; //All of this is made in order to print only one invalid command
            scanf("%c", &c);
            if (c == '\n'){
                goto x;
            }
            while(c!='\n')
                scanf("%c", &c);
            x:
            printf("Invalid input\n");
            c=0;
        }
    }
}
